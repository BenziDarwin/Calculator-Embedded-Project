
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  00000a4c  00000ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a4c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000ada  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114a  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d07  00000000  00000000  00001d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005fe  00000000  00000000  00002a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00003020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000602  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e2  00000000  00000000  000036d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00003cb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e4       	ldi	r30, 0x4C	; 76
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 31       	cpi	r26, 0x1A	; 26
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	b1 d0       	rcall	.+354    	; 0x272 <main>
 110:	9b c4       	rjmp	.+2358   	; 0xa48 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <latch>:
}

// Latch operation for the LCD
void latch()
{
	PORTC |= (1 << ENABLE);   // ENABLE = 1
 114:	88 b1       	in	r24, 0x08	; 8
 116:	80 68       	ori	r24, 0x80	; 128
 118:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <latch+0xa>
 122:	00 c0       	rjmp	.+0      	; 0x124 <latch+0x10>
 124:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1 << ENABLE);  // ENABLE = 0
 126:	88 b1       	in	r24, 0x08	; 8
 128:	8f 77       	andi	r24, 0x7F	; 127
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <latch+0x1c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <latch+0x22>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <lcd_command>:
}

// Send command to the LCD
void lcd_command(unsigned char cmd)
{
	PORTC &= ~(1 << RS);  // RS = 0 for command
 13a:	98 b1       	in	r25, 0x08	; 8
 13c:	9f 7d       	andi	r25, 0xDF	; 223
 13e:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~(1 << RW);  // RW = 0 for write
 140:	98 b1       	in	r25, 0x08	; 8
 142:	9f 7b       	andi	r25, 0xBF	; 191
 144:	98 b9       	out	0x08, r25	; 8
	LCD_DATA = cmd;       // Put command on data bus
 146:	8b b9       	out	0x0b, r24	; 11
	latch();              // Latch the command
 148:	e5 cf       	rjmp	.-54     	; 0x114 <latch>
 14a:	08 95       	ret

0000014c <lcd_init>:
}

// Initialize the LCD
void lcd_init(void)
{
	lcd_command(0x38);  // 8-bit, 2 lines, 5x7 dots
 14c:	88 e3       	ldi	r24, 0x38	; 56
 14e:	f5 df       	rcall	.-22     	; 0x13a <lcd_command>
 150:	83 ec       	ldi	r24, 0xC3	; 195
 152:	99 e0       	ldi	r25, 0x09	; 9
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_init+0x8>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_init+0xe>
 15a:	00 00       	nop
	_delay_ms(10);
	lcd_command(0x0F);  // Display ON, Cursor OFF
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	ed df       	rcall	.-38     	; 0x13a <lcd_command>
 160:	83 ec       	ldi	r24, 0xC3	; 195
 162:	99 e0       	ldi	r25, 0x09	; 9
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_init+0x18>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_init+0x1e>
	_delay_ms(10);
	lcd_command(0x01);  // Clear Display
 16a:	00 00       	nop
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	e5 df       	rcall	.-54     	; 0x13a <lcd_command>
 170:	83 ec       	ldi	r24, 0xC3	; 195
 172:	99 e0       	ldi	r25, 0x09	; 9
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_init+0x28>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_init+0x2e>
	_delay_ms(10);
	lcd_command(0x06);  // Entry Mode Set
 17a:	00 00       	nop
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	dd df       	rcall	.-70     	; 0x13a <lcd_command>
 180:	83 ec       	ldi	r24, 0xC3	; 195
 182:	99 e0       	ldi	r25, 0x09	; 9
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0x38>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x3e>
 18a:	00 00       	nop
 18c:	08 95       	ret

0000018e <lcd_data>:
}

// Send data to the LCD
void lcd_data(unsigned char data)
{
	PORTC |= (1 << RS);   // RS = 1 for data
 18e:	98 b1       	in	r25, 0x08	; 8
 190:	90 62       	ori	r25, 0x20	; 32
 192:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~(1 << RW);  // RW = 0 for write
 194:	98 b1       	in	r25, 0x08	; 8
 196:	9f 7b       	andi	r25, 0xBF	; 191
 198:	98 b9       	out	0x08, r25	; 8
	LCD_DATA = data;      // Put data on data bus
 19a:	8b b9       	out	0x0b, r24	; 11
	latch();              // Latch the data
 19c:	bb cf       	rjmp	.-138    	; 0x114 <latch>
 19e:	08 95       	ret

000001a0 <display_on_lcd>:
	_delay_ms(1);
}

// Display a string on the LCD
void display_on_lcd(char* str, uint8_t clear_display)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
	if (clear_display) {
 1a6:	66 23       	and	r22, r22
 1a8:	29 f0       	breq	.+10     	; 0x1b4 <display_on_lcd+0x14>
		lcd_command(0x01);  // Clear display
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	c6 df       	rcall	.-116    	; 0x13a <lcd_command>
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <display_on_lcd+0x14>
	}
	while (*str) {
		lcd_data(*str++);  // Display each character
 1b0:	21 96       	adiw	r28, 0x01	; 1
 1b2:	ed df       	rcall	.-38     	; 0x18e <lcd_data>
void display_on_lcd(char* str, uint8_t clear_display)
{
	if (clear_display) {
		lcd_command(0x01);  // Clear display
	}
	while (*str) {
 1b4:	88 81       	ld	r24, Y
 1b6:	81 11       	cpse	r24, r1
 1b8:	fb cf       	rjmp	.-10     	; 0x1b0 <display_on_lcd+0x10>
		lcd_data(*str++);  // Display each character
	}
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <read_keypad>:

// Read the keypad
char read_keypad(void)
{
	// Scan columns
	for (uint8_t col = 0; col < 4; col++) {
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	2b c0       	rjmp	.+86     	; 0x21a <read_keypad+0x5a>
		PORTA = ~(1 << (col + 4));  // Set one column low at a time
 1c4:	42 2f       	mov	r20, r18
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	ba 01       	movw	r22, r20
 1ca:	6c 5f       	subi	r22, 0xFC	; 252
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <read_keypad+0x18>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <read_keypad+0x14>
 1dc:	80 95       	com	r24
 1de:	82 b9       	out	0x02, r24	; 2
		
		// Check rows
		if (!(PINA & (1 << ROW1))) return "789/"[col];
 1e0:	00 99       	sbic	0x00, 0	; 0
 1e2:	05 c0       	rjmp	.+10     	; 0x1ee <read_keypad+0x2e>
 1e4:	fa 01       	movw	r30, r20
 1e6:	e0 50       	subi	r30, 0x00	; 0
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	80 81       	ld	r24, Z
 1ec:	08 95       	ret
		if (!(PINA & (1 << ROW2))) return "456*"[col];
 1ee:	01 99       	sbic	0x00, 1	; 0
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <read_keypad+0x3c>
 1f2:	fa 01       	movw	r30, r20
 1f4:	eb 5f       	subi	r30, 0xFB	; 251
 1f6:	fd 4f       	sbci	r31, 0xFD	; 253
 1f8:	80 81       	ld	r24, Z
 1fa:	08 95       	ret
		if (!(PINA & (1 << ROW3))) return "123-"[col];
 1fc:	02 99       	sbic	0x00, 2	; 0
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <read_keypad+0x4a>
 200:	fa 01       	movw	r30, r20
 202:	e6 5f       	subi	r30, 0xF6	; 246
 204:	fd 4f       	sbci	r31, 0xFD	; 253
 206:	80 81       	ld	r24, Z
 208:	08 95       	ret
		if (!(PINA & (1 << ROW4))) return "C0=+"[col];
 20a:	03 99       	sbic	0x00, 3	; 0
 20c:	05 c0       	rjmp	.+10     	; 0x218 <read_keypad+0x58>
 20e:	fa 01       	movw	r30, r20
 210:	e1 5f       	subi	r30, 0xF1	; 241
 212:	fd 4f       	sbci	r31, 0xFD	; 253
 214:	80 81       	ld	r24, Z
 216:	08 95       	ret

// Read the keypad
char read_keypad(void)
{
	// Scan columns
	for (uint8_t col = 0; col < 4; col++) {
 218:	2f 5f       	subi	r18, 0xFF	; 255
 21a:	24 30       	cpi	r18, 0x04	; 4
 21c:	98 f2       	brcs	.-90     	; 0x1c4 <read_keypad+0x4>
		if (!(PINA & (1 << ROW1))) return "789/"[col];
		if (!(PINA & (1 << ROW2))) return "456*"[col];
		if (!(PINA & (1 << ROW3))) return "123-"[col];
		if (!(PINA & (1 << ROW4))) return "C0=+"[col];
	}
	return 0;  // No key pressed
 21e:	80 e0       	ldi	r24, 0x00	; 0
}
 220:	08 95       	ret

00000222 <calculate>:

// Perform calculation based on the operator
int calculate(int a, int b, char op)
{
	switch (op) {
 222:	4b 32       	cpi	r20, 0x2B	; 43
 224:	49 f0       	breq	.+18     	; 0x238 <calculate+0x16>
 226:	18 f4       	brcc	.+6      	; 0x22e <calculate+0xc>
 228:	4a 32       	cpi	r20, 0x2A	; 42
 22a:	71 f0       	breq	.+28     	; 0x248 <calculate+0x26>
 22c:	1b c0       	rjmp	.+54     	; 0x264 <calculate+0x42>
 22e:	4d 32       	cpi	r20, 0x2D	; 45
 230:	39 f0       	breq	.+14     	; 0x240 <calculate+0x1e>
 232:	4f 32       	cpi	r20, 0x2F	; 47
 234:	89 f0       	breq	.+34     	; 0x258 <calculate+0x36>
 236:	16 c0       	rjmp	.+44     	; 0x264 <calculate+0x42>
		case '+': return a + b;
 238:	9c 01       	movw	r18, r24
 23a:	26 0f       	add	r18, r22
 23c:	37 1f       	adc	r19, r23
 23e:	17 c0       	rjmp	.+46     	; 0x26e <calculate+0x4c>
		case '-': return a - b;
 240:	9c 01       	movw	r18, r24
 242:	26 1b       	sub	r18, r22
 244:	37 0b       	sbc	r19, r23
 246:	13 c0       	rjmp	.+38     	; 0x26e <calculate+0x4c>
		case '*': return a * b;
 248:	86 9f       	mul	r24, r22
 24a:	90 01       	movw	r18, r0
 24c:	87 9f       	mul	r24, r23
 24e:	30 0d       	add	r19, r0
 250:	96 9f       	mul	r25, r22
 252:	30 0d       	add	r19, r0
 254:	11 24       	eor	r1, r1
 256:	0b c0       	rjmp	.+22     	; 0x26e <calculate+0x4c>
		case '/': return (b != 0) ? a / b : 0;  // Handle division by zero
 258:	61 15       	cp	r22, r1
 25a:	71 05       	cpc	r23, r1
 25c:	31 f0       	breq	.+12     	; 0x26a <calculate+0x48>
 25e:	e4 d0       	rcall	.+456    	; 0x428 <__divmodhi4>
 260:	9b 01       	movw	r18, r22
 262:	05 c0       	rjmp	.+10     	; 0x26e <calculate+0x4c>
		default: return 0;
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <calculate+0x4c>
{
	switch (op) {
		case '+': return a + b;
		case '-': return a - b;
		case '*': return a * b;
		case '/': return (b != 0) ? a / b : 0;  // Handle division by zero
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
		default: return 0;
	}
}
 26e:	c9 01       	movw	r24, r18
 270:	08 95       	ret

00000272 <main>:
void display_on_lcd(char* str, uint8_t clear_display);
char read_keypad(void);
int calculate(int a, int b, char op);

int main(void)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	60 97       	sbiw	r28, 0x10	; 16
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
	// Set control pins as output
	DDRC |= (1 << RS) | (1 << RW) | (1 << ENABLE);
 286:	87 b1       	in	r24, 0x07	; 7
 288:	80 6e       	ori	r24, 0xE0	; 224
 28a:	87 b9       	out	0x07, r24	; 7

	// Set LCD data pins as output
	DDRD = 0xFF;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	8a b9       	out	0x0a, r24	; 10

	// Set keypad rows as input and columns as output
	DDRA = 0xF0;  // Upper nibble (PA4-PA7) as output for columns, lower nibble (PA0-PA3) as input for rows
 290:	80 ef       	ldi	r24, 0xF0	; 240
 292:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x0F; // Enable pull-up resistors for rows
 294:	8f e0       	ldi	r24, 0x0F	; 15
 296:	82 b9       	out	0x02, r24	; 2

	lcd_init();  // Initialize the LCD
 298:	59 df       	rcall	.-334    	; 0x14c <lcd_init>
	char operator = 0;
	char buffer[16];
	int result = 0;
	char key = 0;
	char last_key = 0;
	uint8_t clear_display = 0;
 29a:	b1 2c       	mov	r11, r1
	int operand1 = 0, operand2 = 0;
	char operator = 0;
	char buffer[16];
	int result = 0;
	char key = 0;
	char last_key = 0;
 29c:	00 e0       	ldi	r16, 0x00	; 0
	PORTA = 0x0F; // Enable pull-up resistors for rows

	lcd_init();  // Initialize the LCD

	int operand1 = 0, operand2 = 0;
	char operator = 0;
 29e:	91 2c       	mov	r9, r1
	DDRA = 0xF0;  // Upper nibble (PA4-PA7) as output for columns, lower nibble (PA0-PA3) as input for rows
	PORTA = 0x0F; // Enable pull-up resistors for rows

	lcd_init();  // Initialize the LCD

	int operand1 = 0, operand2 = 0;
 2a0:	c1 2c       	mov	r12, r1
 2a2:	d1 2c       	mov	r13, r1
 2a4:	e1 2c       	mov	r14, r1
 2a6:	f1 2c       	mov	r15, r1
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <main+0x3e>
				operator = 0;
				lcd_command(0x01);  // Clear display
				clear_display = 1;
			}

			last_key = key;  // Update last key pressed
 2aa:	01 2f       	mov	r16, r17
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <main+0x3e>
	char last_key = 0;
	uint8_t clear_display = 0;

	while (1)
	{
		key = read_keypad();  // Read the pressed key
 2ae:	01 2f       	mov	r16, r17
 2b0:	87 df       	rcall	.-242    	; 0x1c0 <read_keypad>
 2b2:	18 2f       	mov	r17, r24
		
		// Process the key only if it has changed and is different from the last key
		if (key && key != last_key) {
 2b4:	88 23       	and	r24, r24
 2b6:	09 f4       	brne	.+2      	; 0x2ba <main+0x48>
 2b8:	b3 c0       	rjmp	.+358    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 2ba:	08 17       	cp	r16, r24
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <main+0x4e>
 2be:	b0 c0       	rjmp	.+352    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 2c0:	8f e4       	ldi	r24, 0x4F	; 79
 2c2:	93 ec       	ldi	r25, 0xC3	; 195
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0x52>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x58>
 2ca:	00 00       	nop
			_delay_ms(200);  // Simple debounce delay
			
			if (key >= '0' && key <= '9') {
 2cc:	80 ed       	ldi	r24, 0xD0	; 208
 2ce:	81 0f       	add	r24, r17
 2d0:	8a 30       	cpi	r24, 0x0A	; 10
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <main+0x64>
 2d4:	50 c0       	rjmp	.+160    	; 0x376 <main+0x104>
				// If a number is pressed
				if (operator == 0) {
 2d6:	91 10       	cpse	r9, r1
 2d8:	24 c0       	rjmp	.+72     	; 0x322 <main+0xb0>
					// First operand
					operand1 = operand1 * 10 + (key - '0');
 2da:	c7 01       	movw	r24, r14
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	ee 0c       	add	r14, r14
 2e2:	ff 1c       	adc	r15, r15
 2e4:	ee 0c       	add	r14, r14
 2e6:	ff 1c       	adc	r15, r15
 2e8:	ee 0c       	add	r14, r14
 2ea:	ff 1c       	adc	r15, r15
 2ec:	e8 0e       	add	r14, r24
 2ee:	f9 1e       	adc	r15, r25
 2f0:	81 2f       	mov	r24, r17
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	c0 97       	sbiw	r24, 0x30	; 48
 2f6:	e8 0e       	add	r14, r24
 2f8:	f9 1e       	adc	r15, r25
					snprintf(buffer, 16, "%d", operand1);
 2fa:	ff 92       	push	r15
 2fc:	ef 92       	push	r14
 2fe:	84 e1       	ldi	r24, 0x14	; 20
 300:	92 e0       	ldi	r25, 0x02	; 2
 302:	9f 93       	push	r25
 304:	8f 93       	push	r24
 306:	1f 92       	push	r1
 308:	80 e1       	ldi	r24, 0x10	; 16
 30a:	8f 93       	push	r24
 30c:	ce 01       	movw	r24, r28
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	9f 93       	push	r25
 312:	8f 93       	push	r24
 314:	b0 d0       	rcall	.+352    	; 0x476 <snprintf>
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	23 c0       	rjmp	.+70     	; 0x368 <main+0xf6>
					} else {
					// Second operand
					operand2 = operand2 * 10 + (key - '0');
 322:	c6 01       	movw	r24, r12
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	cc 0c       	add	r12, r12
 32a:	dd 1c       	adc	r13, r13
 32c:	cc 0c       	add	r12, r12
 32e:	dd 1c       	adc	r13, r13
 330:	cc 0c       	add	r12, r12
 332:	dd 1c       	adc	r13, r13
 334:	c8 0e       	add	r12, r24
 336:	d9 1e       	adc	r13, r25
 338:	81 2f       	mov	r24, r17
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	c0 97       	sbiw	r24, 0x30	; 48
 33e:	c8 0e       	add	r12, r24
 340:	d9 1e       	adc	r13, r25
					snprintf(buffer, 16, "%d", operand2);
 342:	df 92       	push	r13
 344:	cf 92       	push	r12
 346:	84 e1       	ldi	r24, 0x14	; 20
 348:	92 e0       	ldi	r25, 0x02	; 2
 34a:	9f 93       	push	r25
 34c:	8f 93       	push	r24
 34e:	1f 92       	push	r1
 350:	80 e1       	ldi	r24, 0x10	; 16
 352:	8f 93       	push	r24
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	9f 93       	push	r25
 35a:	8f 93       	push	r24
 35c:	8c d0       	rcall	.+280    	; 0x476 <snprintf>
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
				}
				display_on_lcd(buffer, clear_display);  // Append the number to the display
 368:	6b 2d       	mov	r22, r11
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	18 df       	rcall	.-464    	; 0x1a0 <display_on_lcd>
 370:	01 2f       	mov	r16, r17
				operator = 0;
				lcd_command(0x01);  // Clear display
				clear_display = 1;
			}

			last_key = key;  // Update last key pressed
 372:	b1 2c       	mov	r11, r1
					// Second operand
					operand2 = operand2 * 10 + (key - '0');
					snprintf(buffer, 16, "%d", operand2);
				}
				display_on_lcd(buffer, clear_display);  // Append the number to the display
				clear_display = 0;
 374:	9d cf       	rjmp	.-198    	; 0x2b0 <main+0x3e>
 376:	1b 32       	cpi	r17, 0x2B	; 43
			}
			else if (key == '+' || key == '-' || key == '*' || key == '/') {
 378:	31 f0       	breq	.+12     	; 0x386 <main+0x114>
 37a:	1d 32       	cpi	r17, 0x2D	; 45
 37c:	21 f0       	breq	.+8      	; 0x386 <main+0x114>
 37e:	1a 32       	cpi	r17, 0x2A	; 42
 380:	11 f0       	breq	.+4      	; 0x386 <main+0x114>
 382:	1f 32       	cpi	r17, 0x2F	; 47
 384:	d9 f4       	brne	.+54     	; 0x3bc <main+0x14a>
 386:	1f 92       	push	r1
				// If an operator is pressed
				operator = key;
				snprintf(buffer, 2, "%c", operator);
 388:	1f 93       	push	r17
 38a:	87 e1       	ldi	r24, 0x17	; 23
 38c:	92 e0       	ldi	r25, 0x02	; 2
 38e:	9f 93       	push	r25
 390:	8f 93       	push	r24
 392:	1f 92       	push	r1
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	8f 93       	push	r24
 398:	ce 01       	movw	r24, r28
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	4c 01       	movw	r8, r24
 39e:	9f 93       	push	r25
 3a0:	8f 93       	push	r24
 3a2:	69 d0       	rcall	.+210    	; 0x476 <snprintf>
				display_on_lcd(buffer, clear_display);  // Append the operator to the display
 3a4:	6b 2d       	mov	r22, r11
 3a6:	c4 01       	movw	r24, r8
 3a8:	fb de       	rcall	.-522    	; 0x1a0 <display_on_lcd>
 3aa:	0f b6       	in	r0, 0x3f	; 63
				clear_display = 0;
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	01 2f       	mov	r16, r17
				operator = 0;
				lcd_command(0x01);  // Clear display
				clear_display = 1;
			}

			last_key = key;  // Update last key pressed
 3b6:	91 2e       	mov	r9, r17
				display_on_lcd(buffer, clear_display);  // Append the number to the display
				clear_display = 0;
			}
			else if (key == '+' || key == '-' || key == '*' || key == '/') {
				// If an operator is pressed
				operator = key;
 3b8:	b1 2c       	mov	r11, r1
				snprintf(buffer, 2, "%c", operator);
				display_on_lcd(buffer, clear_display);  // Append the operator to the display
				clear_display = 0;
 3ba:	7a cf       	rjmp	.-268    	; 0x2b0 <main+0x3e>
			}
			else if (key == '=') {
 3bc:	1d 33       	cpi	r17, 0x3D	; 61
 3be:	11 f5       	brne	.+68     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
				// If '=' is pressed, perform calculation
				result = calculate(operand1, operand2, operator);
 3c0:	49 2d       	mov	r20, r9
 3c2:	b6 01       	movw	r22, r12
 3c4:	c7 01       	movw	r24, r14
 3c6:	2d df       	rcall	.-422    	; 0x222 <calculate>
 3c8:	7c 01       	movw	r14, r24
 3ca:	ff 92       	push	r15
				snprintf(buffer, 16, "%d", result);
 3cc:	8f 93       	push	r24
 3ce:	84 e1       	ldi	r24, 0x14	; 20
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	9f 93       	push	r25
 3d4:	8f 93       	push	r24
 3d6:	1f 92       	push	r1
 3d8:	80 e1       	ldi	r24, 0x10	; 16
 3da:	8f 93       	push	r24
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	6c 01       	movw	r12, r24
 3e2:	9f 93       	push	r25
 3e4:	8f 93       	push	r24
 3e6:	47 d0       	rcall	.+142    	; 0x476 <snprintf>
				display_on_lcd(buffer, 1);  // Clear the display and show the result
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	c6 01       	movw	r24, r12
 3ec:	d9 de       	rcall	.-590    	; 0x1a0 <display_on_lcd>
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
 3f8:	01 2f       	mov	r16, r17
				clear_display = 0;
 3fa:	b1 2c       	mov	r11, r1
				
				// Reset for the next calculation
				operand1 = result;
				operand2 = 0;
				operator = 0;
 3fc:	91 2c       	mov	r9, r1
				display_on_lcd(buffer, 1);  // Clear the display and show the result
				clear_display = 0;
				
				// Reset for the next calculation
				operand1 = result;
				operand2 = 0;
 3fe:	c1 2c       	mov	r12, r1
 400:	d1 2c       	mov	r13, r1
 402:	56 cf       	rjmp	.-340    	; 0x2b0 <main+0x3e>
				operator = 0;
			}
			else if (key == 'C') {
 404:	13 34       	cpi	r17, 0x43	; 67
 406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	50 cf       	rjmp	.-352    	; 0x2aa <main+0x38>
				// If 'C' is pressed, clear everything
				operand1 = 0;
				operand2 = 0;
				operator = 0;
				lcd_command(0x01);  // Clear display
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	96 de       	rcall	.-724    	; 0x13a <lcd_command>
 40e:	01 2f       	mov	r16, r17
				clear_display = 1;
			}

			last_key = key;  // Update last key pressed
 410:	bb 24       	eor	r11, r11
				// If 'C' is pressed, clear everything
				operand1 = 0;
				operand2 = 0;
				operator = 0;
				lcd_command(0x01);  // Clear display
				clear_display = 1;
 412:	b3 94       	inc	r11
 414:	91 2c       	mov	r9, r1
			}
			else if (key == 'C') {
				// If 'C' is pressed, clear everything
				operand1 = 0;
				operand2 = 0;
				operator = 0;
 416:	c1 2c       	mov	r12, r1
				operator = 0;
			}
			else if (key == 'C') {
				// If 'C' is pressed, clear everything
				operand1 = 0;
				operand2 = 0;
 418:	d1 2c       	mov	r13, r1
 41a:	e1 2c       	mov	r14, r1
				operand2 = 0;
				operator = 0;
			}
			else if (key == 'C') {
				// If 'C' is pressed, clear everything
				operand1 = 0;
 41c:	f1 2c       	mov	r15, r1
 41e:	48 cf       	rjmp	.-368    	; 0x2b0 <main+0x3e>
 420:	11 23       	and	r17, r17
				clear_display = 1;
			}

			last_key = key;  // Update last key pressed
		}
		else if (!key) {
 422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	44 cf       	rjmp	.-376    	; 0x2ae <main+0x3c>
 426:	44 cf       	rjmp	.-376    	; 0x2b0 <main+0x3e>

00000428 <__divmodhi4>:
 428:	97 fb       	bst	r25, 7
 42a:	07 2e       	mov	r0, r23
 42c:	16 f4       	brtc	.+4      	; 0x432 <__divmodhi4+0xa>
 42e:	00 94       	com	r0
 430:	06 d0       	rcall	.+12     	; 0x43e <__divmodhi4_neg1>
 432:	77 fd       	sbrc	r23, 7
 434:	08 d0       	rcall	.+16     	; 0x446 <__divmodhi4_neg2>
 436:	0b d0       	rcall	.+22     	; 0x44e <__udivmodhi4>
 438:	07 fc       	sbrc	r0, 7
 43a:	05 d0       	rcall	.+10     	; 0x446 <__divmodhi4_neg2>
 43c:	3e f4       	brtc	.+14     	; 0x44c <__divmodhi4_exit>

0000043e <__divmodhi4_neg1>:
 43e:	90 95       	com	r25
 440:	81 95       	neg	r24
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	08 95       	ret

00000446 <__divmodhi4_neg2>:
 446:	70 95       	com	r23
 448:	61 95       	neg	r22
 44a:	7f 4f       	sbci	r23, 0xFF	; 255

0000044c <__divmodhi4_exit>:
 44c:	08 95       	ret

0000044e <__udivmodhi4>:
 44e:	aa 1b       	sub	r26, r26
 450:	bb 1b       	sub	r27, r27
 452:	51 e1       	ldi	r21, 0x11	; 17
 454:	07 c0       	rjmp	.+14     	; 0x464 <__udivmodhi4_ep>

00000456 <__udivmodhi4_loop>:
 456:	aa 1f       	adc	r26, r26
 458:	bb 1f       	adc	r27, r27
 45a:	a6 17       	cp	r26, r22
 45c:	b7 07       	cpc	r27, r23
 45e:	10 f0       	brcs	.+4      	; 0x464 <__udivmodhi4_ep>
 460:	a6 1b       	sub	r26, r22
 462:	b7 0b       	sbc	r27, r23

00000464 <__udivmodhi4_ep>:
 464:	88 1f       	adc	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	5a 95       	dec	r21
 46a:	a9 f7       	brne	.-22     	; 0x456 <__udivmodhi4_loop>
 46c:	80 95       	com	r24
 46e:	90 95       	com	r25
 470:	bc 01       	movw	r22, r24
 472:	cd 01       	movw	r24, r26
 474:	08 95       	ret

00000476 <snprintf>:
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	2e 97       	sbiw	r28, 0x0e	; 14
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	0e 89       	ldd	r16, Y+22	; 0x16
 490:	1f 89       	ldd	r17, Y+23	; 0x17
 492:	88 8d       	ldd	r24, Y+24	; 0x18
 494:	99 8d       	ldd	r25, Y+25	; 0x19
 496:	26 e0       	ldi	r18, 0x06	; 6
 498:	2c 83       	std	Y+4, r18	; 0x04
 49a:	1a 83       	std	Y+2, r17	; 0x02
 49c:	09 83       	std	Y+1, r16	; 0x01
 49e:	97 ff       	sbrs	r25, 7
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <snprintf+0x30>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e8       	ldi	r25, 0x80	; 128
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	9e 83       	std	Y+6, r25	; 0x06
 4aa:	8d 83       	std	Y+5, r24	; 0x05
 4ac:	ae 01       	movw	r20, r28
 4ae:	44 5e       	subi	r20, 0xE4	; 228
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	6a 8d       	ldd	r22, Y+26	; 0x1a
 4b4:	7b 8d       	ldd	r23, Y+27	; 0x1b
 4b6:	ce 01       	movw	r24, r28
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	19 d0       	rcall	.+50     	; 0x4ee <vfprintf>
 4bc:	4d 81       	ldd	r20, Y+5	; 0x05
 4be:	5e 81       	ldd	r21, Y+6	; 0x06
 4c0:	57 fd       	sbrc	r21, 7
 4c2:	0a c0       	rjmp	.+20     	; 0x4d8 <snprintf+0x62>
 4c4:	2f 81       	ldd	r18, Y+7	; 0x07
 4c6:	38 85       	ldd	r19, Y+8	; 0x08
 4c8:	42 17       	cp	r20, r18
 4ca:	53 07       	cpc	r21, r19
 4cc:	0c f4       	brge	.+2      	; 0x4d0 <snprintf+0x5a>
 4ce:	9a 01       	movw	r18, r20
 4d0:	f8 01       	movw	r30, r16
 4d2:	e2 0f       	add	r30, r18
 4d4:	f3 1f       	adc	r31, r19
 4d6:	10 82       	st	Z, r1
 4d8:	2e 96       	adiw	r28, 0x0e	; 14
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	08 95       	ret

000004ee <vfprintf>:
 4ee:	2f 92       	push	r2
 4f0:	3f 92       	push	r3
 4f2:	4f 92       	push	r4
 4f4:	5f 92       	push	r5
 4f6:	6f 92       	push	r6
 4f8:	7f 92       	push	r7
 4fa:	8f 92       	push	r8
 4fc:	9f 92       	push	r9
 4fe:	af 92       	push	r10
 500:	bf 92       	push	r11
 502:	cf 92       	push	r12
 504:	df 92       	push	r13
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	2b 97       	sbiw	r28, 0x0b	; 11
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	6c 01       	movw	r12, r24
 524:	7b 01       	movw	r14, r22
 526:	8a 01       	movw	r16, r20
 528:	fc 01       	movw	r30, r24
 52a:	17 82       	std	Z+7, r1	; 0x07
 52c:	16 82       	std	Z+6, r1	; 0x06
 52e:	83 81       	ldd	r24, Z+3	; 0x03
 530:	81 ff       	sbrs	r24, 1
 532:	bf c1       	rjmp	.+894    	; 0x8b2 <vfprintf+0x3c4>
 534:	ce 01       	movw	r24, r28
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	3c 01       	movw	r6, r24
 53a:	f6 01       	movw	r30, r12
 53c:	93 81       	ldd	r25, Z+3	; 0x03
 53e:	f7 01       	movw	r30, r14
 540:	93 fd       	sbrc	r25, 3
 542:	85 91       	lpm	r24, Z+
 544:	93 ff       	sbrs	r25, 3
 546:	81 91       	ld	r24, Z+
 548:	7f 01       	movw	r14, r30
 54a:	88 23       	and	r24, r24
 54c:	09 f4       	brne	.+2      	; 0x550 <vfprintf+0x62>
 54e:	ad c1       	rjmp	.+858    	; 0x8aa <vfprintf+0x3bc>
 550:	85 32       	cpi	r24, 0x25	; 37
 552:	39 f4       	brne	.+14     	; 0x562 <vfprintf+0x74>
 554:	93 fd       	sbrc	r25, 3
 556:	85 91       	lpm	r24, Z+
 558:	93 ff       	sbrs	r25, 3
 55a:	81 91       	ld	r24, Z+
 55c:	7f 01       	movw	r14, r30
 55e:	85 32       	cpi	r24, 0x25	; 37
 560:	21 f4       	brne	.+8      	; 0x56a <vfprintf+0x7c>
 562:	b6 01       	movw	r22, r12
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	d6 d1       	rcall	.+940    	; 0x914 <fputc>
 568:	e8 cf       	rjmp	.-48     	; 0x53a <vfprintf+0x4c>
 56a:	91 2c       	mov	r9, r1
 56c:	21 2c       	mov	r2, r1
 56e:	31 2c       	mov	r3, r1
 570:	ff e1       	ldi	r31, 0x1F	; 31
 572:	f3 15       	cp	r31, r3
 574:	d8 f0       	brcs	.+54     	; 0x5ac <vfprintf+0xbe>
 576:	8b 32       	cpi	r24, 0x2B	; 43
 578:	79 f0       	breq	.+30     	; 0x598 <vfprintf+0xaa>
 57a:	38 f4       	brcc	.+14     	; 0x58a <vfprintf+0x9c>
 57c:	80 32       	cpi	r24, 0x20	; 32
 57e:	79 f0       	breq	.+30     	; 0x59e <vfprintf+0xb0>
 580:	83 32       	cpi	r24, 0x23	; 35
 582:	a1 f4       	brne	.+40     	; 0x5ac <vfprintf+0xbe>
 584:	23 2d       	mov	r18, r3
 586:	20 61       	ori	r18, 0x10	; 16
 588:	1d c0       	rjmp	.+58     	; 0x5c4 <vfprintf+0xd6>
 58a:	8d 32       	cpi	r24, 0x2D	; 45
 58c:	61 f0       	breq	.+24     	; 0x5a6 <vfprintf+0xb8>
 58e:	80 33       	cpi	r24, 0x30	; 48
 590:	69 f4       	brne	.+26     	; 0x5ac <vfprintf+0xbe>
 592:	23 2d       	mov	r18, r3
 594:	21 60       	ori	r18, 0x01	; 1
 596:	16 c0       	rjmp	.+44     	; 0x5c4 <vfprintf+0xd6>
 598:	83 2d       	mov	r24, r3
 59a:	82 60       	ori	r24, 0x02	; 2
 59c:	38 2e       	mov	r3, r24
 59e:	e3 2d       	mov	r30, r3
 5a0:	e4 60       	ori	r30, 0x04	; 4
 5a2:	3e 2e       	mov	r3, r30
 5a4:	2a c0       	rjmp	.+84     	; 0x5fa <vfprintf+0x10c>
 5a6:	f3 2d       	mov	r31, r3
 5a8:	f8 60       	ori	r31, 0x08	; 8
 5aa:	1d c0       	rjmp	.+58     	; 0x5e6 <vfprintf+0xf8>
 5ac:	37 fc       	sbrc	r3, 7
 5ae:	2d c0       	rjmp	.+90     	; 0x60a <vfprintf+0x11c>
 5b0:	20 ed       	ldi	r18, 0xD0	; 208
 5b2:	28 0f       	add	r18, r24
 5b4:	2a 30       	cpi	r18, 0x0A	; 10
 5b6:	40 f0       	brcs	.+16     	; 0x5c8 <vfprintf+0xda>
 5b8:	8e 32       	cpi	r24, 0x2E	; 46
 5ba:	b9 f4       	brne	.+46     	; 0x5ea <vfprintf+0xfc>
 5bc:	36 fc       	sbrc	r3, 6
 5be:	75 c1       	rjmp	.+746    	; 0x8aa <vfprintf+0x3bc>
 5c0:	23 2d       	mov	r18, r3
 5c2:	20 64       	ori	r18, 0x40	; 64
 5c4:	32 2e       	mov	r3, r18
 5c6:	19 c0       	rjmp	.+50     	; 0x5fa <vfprintf+0x10c>
 5c8:	36 fe       	sbrs	r3, 6
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <vfprintf+0xea>
 5cc:	8a e0       	ldi	r24, 0x0A	; 10
 5ce:	98 9e       	mul	r9, r24
 5d0:	20 0d       	add	r18, r0
 5d2:	11 24       	eor	r1, r1
 5d4:	92 2e       	mov	r9, r18
 5d6:	11 c0       	rjmp	.+34     	; 0x5fa <vfprintf+0x10c>
 5d8:	ea e0       	ldi	r30, 0x0A	; 10
 5da:	2e 9e       	mul	r2, r30
 5dc:	20 0d       	add	r18, r0
 5de:	11 24       	eor	r1, r1
 5e0:	22 2e       	mov	r2, r18
 5e2:	f3 2d       	mov	r31, r3
 5e4:	f0 62       	ori	r31, 0x20	; 32
 5e6:	3f 2e       	mov	r3, r31
 5e8:	08 c0       	rjmp	.+16     	; 0x5fa <vfprintf+0x10c>
 5ea:	8c 36       	cpi	r24, 0x6C	; 108
 5ec:	21 f4       	brne	.+8      	; 0x5f6 <vfprintf+0x108>
 5ee:	83 2d       	mov	r24, r3
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	38 2e       	mov	r3, r24
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <vfprintf+0x10c>
 5f6:	88 36       	cpi	r24, 0x68	; 104
 5f8:	41 f4       	brne	.+16     	; 0x60a <vfprintf+0x11c>
 5fa:	f7 01       	movw	r30, r14
 5fc:	93 fd       	sbrc	r25, 3
 5fe:	85 91       	lpm	r24, Z+
 600:	93 ff       	sbrs	r25, 3
 602:	81 91       	ld	r24, Z+
 604:	7f 01       	movw	r14, r30
 606:	81 11       	cpse	r24, r1
 608:	b3 cf       	rjmp	.-154    	; 0x570 <vfprintf+0x82>
 60a:	98 2f       	mov	r25, r24
 60c:	9f 7d       	andi	r25, 0xDF	; 223
 60e:	95 54       	subi	r25, 0x45	; 69
 610:	93 30       	cpi	r25, 0x03	; 3
 612:	28 f4       	brcc	.+10     	; 0x61e <vfprintf+0x130>
 614:	0c 5f       	subi	r16, 0xFC	; 252
 616:	1f 4f       	sbci	r17, 0xFF	; 255
 618:	9f e3       	ldi	r25, 0x3F	; 63
 61a:	99 83       	std	Y+1, r25	; 0x01
 61c:	0d c0       	rjmp	.+26     	; 0x638 <vfprintf+0x14a>
 61e:	83 36       	cpi	r24, 0x63	; 99
 620:	31 f0       	breq	.+12     	; 0x62e <vfprintf+0x140>
 622:	83 37       	cpi	r24, 0x73	; 115
 624:	71 f0       	breq	.+28     	; 0x642 <vfprintf+0x154>
 626:	83 35       	cpi	r24, 0x53	; 83
 628:	09 f0       	breq	.+2      	; 0x62c <vfprintf+0x13e>
 62a:	55 c0       	rjmp	.+170    	; 0x6d6 <vfprintf+0x1e8>
 62c:	20 c0       	rjmp	.+64     	; 0x66e <vfprintf+0x180>
 62e:	f8 01       	movw	r30, r16
 630:	80 81       	ld	r24, Z
 632:	89 83       	std	Y+1, r24	; 0x01
 634:	0e 5f       	subi	r16, 0xFE	; 254
 636:	1f 4f       	sbci	r17, 0xFF	; 255
 638:	88 24       	eor	r8, r8
 63a:	83 94       	inc	r8
 63c:	91 2c       	mov	r9, r1
 63e:	53 01       	movw	r10, r6
 640:	12 c0       	rjmp	.+36     	; 0x666 <vfprintf+0x178>
 642:	28 01       	movw	r4, r16
 644:	f2 e0       	ldi	r31, 0x02	; 2
 646:	4f 0e       	add	r4, r31
 648:	51 1c       	adc	r5, r1
 64a:	f8 01       	movw	r30, r16
 64c:	a0 80       	ld	r10, Z
 64e:	b1 80       	ldd	r11, Z+1	; 0x01
 650:	36 fe       	sbrs	r3, 6
 652:	03 c0       	rjmp	.+6      	; 0x65a <vfprintf+0x16c>
 654:	69 2d       	mov	r22, r9
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <vfprintf+0x170>
 65a:	6f ef       	ldi	r22, 0xFF	; 255
 65c:	7f ef       	ldi	r23, 0xFF	; 255
 65e:	c5 01       	movw	r24, r10
 660:	4e d1       	rcall	.+668    	; 0x8fe <strnlen>
 662:	4c 01       	movw	r8, r24
 664:	82 01       	movw	r16, r4
 666:	f3 2d       	mov	r31, r3
 668:	ff 77       	andi	r31, 0x7F	; 127
 66a:	3f 2e       	mov	r3, r31
 66c:	15 c0       	rjmp	.+42     	; 0x698 <vfprintf+0x1aa>
 66e:	28 01       	movw	r4, r16
 670:	22 e0       	ldi	r18, 0x02	; 2
 672:	42 0e       	add	r4, r18
 674:	51 1c       	adc	r5, r1
 676:	f8 01       	movw	r30, r16
 678:	a0 80       	ld	r10, Z
 67a:	b1 80       	ldd	r11, Z+1	; 0x01
 67c:	36 fe       	sbrs	r3, 6
 67e:	03 c0       	rjmp	.+6      	; 0x686 <vfprintf+0x198>
 680:	69 2d       	mov	r22, r9
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <vfprintf+0x19c>
 686:	6f ef       	ldi	r22, 0xFF	; 255
 688:	7f ef       	ldi	r23, 0xFF	; 255
 68a:	c5 01       	movw	r24, r10
 68c:	2d d1       	rcall	.+602    	; 0x8e8 <strnlen_P>
 68e:	4c 01       	movw	r8, r24
 690:	f3 2d       	mov	r31, r3
 692:	f0 68       	ori	r31, 0x80	; 128
 694:	3f 2e       	mov	r3, r31
 696:	82 01       	movw	r16, r4
 698:	33 fc       	sbrc	r3, 3
 69a:	19 c0       	rjmp	.+50     	; 0x6ce <vfprintf+0x1e0>
 69c:	82 2d       	mov	r24, r2
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	88 16       	cp	r8, r24
 6a2:	99 06       	cpc	r9, r25
 6a4:	a0 f4       	brcc	.+40     	; 0x6ce <vfprintf+0x1e0>
 6a6:	b6 01       	movw	r22, r12
 6a8:	80 e2       	ldi	r24, 0x20	; 32
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	33 d1       	rcall	.+614    	; 0x914 <fputc>
 6ae:	2a 94       	dec	r2
 6b0:	f5 cf       	rjmp	.-22     	; 0x69c <vfprintf+0x1ae>
 6b2:	f5 01       	movw	r30, r10
 6b4:	37 fc       	sbrc	r3, 7
 6b6:	85 91       	lpm	r24, Z+
 6b8:	37 fe       	sbrs	r3, 7
 6ba:	81 91       	ld	r24, Z+
 6bc:	5f 01       	movw	r10, r30
 6be:	b6 01       	movw	r22, r12
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	28 d1       	rcall	.+592    	; 0x914 <fputc>
 6c4:	21 10       	cpse	r2, r1
 6c6:	2a 94       	dec	r2
 6c8:	21 e0       	ldi	r18, 0x01	; 1
 6ca:	82 1a       	sub	r8, r18
 6cc:	91 08       	sbc	r9, r1
 6ce:	81 14       	cp	r8, r1
 6d0:	91 04       	cpc	r9, r1
 6d2:	79 f7       	brne	.-34     	; 0x6b2 <vfprintf+0x1c4>
 6d4:	e1 c0       	rjmp	.+450    	; 0x898 <vfprintf+0x3aa>
 6d6:	84 36       	cpi	r24, 0x64	; 100
 6d8:	11 f0       	breq	.+4      	; 0x6de <vfprintf+0x1f0>
 6da:	89 36       	cpi	r24, 0x69	; 105
 6dc:	39 f5       	brne	.+78     	; 0x72c <vfprintf+0x23e>
 6de:	f8 01       	movw	r30, r16
 6e0:	37 fe       	sbrs	r3, 7
 6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <vfprintf+0x204>
 6e4:	60 81       	ld	r22, Z
 6e6:	71 81       	ldd	r23, Z+1	; 0x01
 6e8:	82 81       	ldd	r24, Z+2	; 0x02
 6ea:	93 81       	ldd	r25, Z+3	; 0x03
 6ec:	0c 5f       	subi	r16, 0xFC	; 252
 6ee:	1f 4f       	sbci	r17, 0xFF	; 255
 6f0:	08 c0       	rjmp	.+16     	; 0x702 <vfprintf+0x214>
 6f2:	60 81       	ld	r22, Z
 6f4:	71 81       	ldd	r23, Z+1	; 0x01
 6f6:	07 2e       	mov	r0, r23
 6f8:	00 0c       	add	r0, r0
 6fa:	88 0b       	sbc	r24, r24
 6fc:	99 0b       	sbc	r25, r25
 6fe:	0e 5f       	subi	r16, 0xFE	; 254
 700:	1f 4f       	sbci	r17, 0xFF	; 255
 702:	f3 2d       	mov	r31, r3
 704:	ff 76       	andi	r31, 0x6F	; 111
 706:	3f 2e       	mov	r3, r31
 708:	97 ff       	sbrs	r25, 7
 70a:	09 c0       	rjmp	.+18     	; 0x71e <vfprintf+0x230>
 70c:	90 95       	com	r25
 70e:	80 95       	com	r24
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	f0 68       	ori	r31, 0x80	; 128
 71c:	3f 2e       	mov	r3, r31
 71e:	2a e0       	ldi	r18, 0x0A	; 10
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	a3 01       	movw	r20, r6
 724:	33 d1       	rcall	.+614    	; 0x98c <__ultoa_invert>
 726:	88 2e       	mov	r8, r24
 728:	86 18       	sub	r8, r6
 72a:	44 c0       	rjmp	.+136    	; 0x7b4 <vfprintf+0x2c6>
 72c:	85 37       	cpi	r24, 0x75	; 117
 72e:	31 f4       	brne	.+12     	; 0x73c <vfprintf+0x24e>
 730:	23 2d       	mov	r18, r3
 732:	2f 7e       	andi	r18, 0xEF	; 239
 734:	b2 2e       	mov	r11, r18
 736:	2a e0       	ldi	r18, 0x0A	; 10
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	25 c0       	rjmp	.+74     	; 0x786 <vfprintf+0x298>
 73c:	93 2d       	mov	r25, r3
 73e:	99 7f       	andi	r25, 0xF9	; 249
 740:	b9 2e       	mov	r11, r25
 742:	8f 36       	cpi	r24, 0x6F	; 111
 744:	c1 f0       	breq	.+48     	; 0x776 <vfprintf+0x288>
 746:	18 f4       	brcc	.+6      	; 0x74e <vfprintf+0x260>
 748:	88 35       	cpi	r24, 0x58	; 88
 74a:	79 f0       	breq	.+30     	; 0x76a <vfprintf+0x27c>
 74c:	ae c0       	rjmp	.+348    	; 0x8aa <vfprintf+0x3bc>
 74e:	80 37       	cpi	r24, 0x70	; 112
 750:	19 f0       	breq	.+6      	; 0x758 <vfprintf+0x26a>
 752:	88 37       	cpi	r24, 0x78	; 120
 754:	21 f0       	breq	.+8      	; 0x75e <vfprintf+0x270>
 756:	a9 c0       	rjmp	.+338    	; 0x8aa <vfprintf+0x3bc>
 758:	e9 2f       	mov	r30, r25
 75a:	e0 61       	ori	r30, 0x10	; 16
 75c:	be 2e       	mov	r11, r30
 75e:	b4 fe       	sbrs	r11, 4
 760:	0d c0       	rjmp	.+26     	; 0x77c <vfprintf+0x28e>
 762:	fb 2d       	mov	r31, r11
 764:	f4 60       	ori	r31, 0x04	; 4
 766:	bf 2e       	mov	r11, r31
 768:	09 c0       	rjmp	.+18     	; 0x77c <vfprintf+0x28e>
 76a:	34 fe       	sbrs	r3, 4
 76c:	0a c0       	rjmp	.+20     	; 0x782 <vfprintf+0x294>
 76e:	29 2f       	mov	r18, r25
 770:	26 60       	ori	r18, 0x06	; 6
 772:	b2 2e       	mov	r11, r18
 774:	06 c0       	rjmp	.+12     	; 0x782 <vfprintf+0x294>
 776:	28 e0       	ldi	r18, 0x08	; 8
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	05 c0       	rjmp	.+10     	; 0x786 <vfprintf+0x298>
 77c:	20 e1       	ldi	r18, 0x10	; 16
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <vfprintf+0x298>
 782:	20 e1       	ldi	r18, 0x10	; 16
 784:	32 e0       	ldi	r19, 0x02	; 2
 786:	f8 01       	movw	r30, r16
 788:	b7 fe       	sbrs	r11, 7
 78a:	07 c0       	rjmp	.+14     	; 0x79a <vfprintf+0x2ac>
 78c:	60 81       	ld	r22, Z
 78e:	71 81       	ldd	r23, Z+1	; 0x01
 790:	82 81       	ldd	r24, Z+2	; 0x02
 792:	93 81       	ldd	r25, Z+3	; 0x03
 794:	0c 5f       	subi	r16, 0xFC	; 252
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0x2b8>
 79a:	60 81       	ld	r22, Z
 79c:	71 81       	ldd	r23, Z+1	; 0x01
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 5f       	subi	r16, 0xFE	; 254
 7a4:	1f 4f       	sbci	r17, 0xFF	; 255
 7a6:	a3 01       	movw	r20, r6
 7a8:	f1 d0       	rcall	.+482    	; 0x98c <__ultoa_invert>
 7aa:	88 2e       	mov	r8, r24
 7ac:	86 18       	sub	r8, r6
 7ae:	fb 2d       	mov	r31, r11
 7b0:	ff 77       	andi	r31, 0x7F	; 127
 7b2:	3f 2e       	mov	r3, r31
 7b4:	36 fe       	sbrs	r3, 6
 7b6:	0d c0       	rjmp	.+26     	; 0x7d2 <vfprintf+0x2e4>
 7b8:	23 2d       	mov	r18, r3
 7ba:	2e 7f       	andi	r18, 0xFE	; 254
 7bc:	a2 2e       	mov	r10, r18
 7be:	89 14       	cp	r8, r9
 7c0:	58 f4       	brcc	.+22     	; 0x7d8 <vfprintf+0x2ea>
 7c2:	34 fe       	sbrs	r3, 4
 7c4:	0b c0       	rjmp	.+22     	; 0x7dc <vfprintf+0x2ee>
 7c6:	32 fc       	sbrc	r3, 2
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <vfprintf+0x2ee>
 7ca:	83 2d       	mov	r24, r3
 7cc:	8e 7e       	andi	r24, 0xEE	; 238
 7ce:	a8 2e       	mov	r10, r24
 7d0:	05 c0       	rjmp	.+10     	; 0x7dc <vfprintf+0x2ee>
 7d2:	b8 2c       	mov	r11, r8
 7d4:	a3 2c       	mov	r10, r3
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x2f0>
 7d8:	b8 2c       	mov	r11, r8
 7da:	01 c0       	rjmp	.+2      	; 0x7de <vfprintf+0x2f0>
 7dc:	b9 2c       	mov	r11, r9
 7de:	a4 fe       	sbrs	r10, 4
 7e0:	0f c0       	rjmp	.+30     	; 0x800 <vfprintf+0x312>
 7e2:	fe 01       	movw	r30, r28
 7e4:	e8 0d       	add	r30, r8
 7e6:	f1 1d       	adc	r31, r1
 7e8:	80 81       	ld	r24, Z
 7ea:	80 33       	cpi	r24, 0x30	; 48
 7ec:	21 f4       	brne	.+8      	; 0x7f6 <vfprintf+0x308>
 7ee:	9a 2d       	mov	r25, r10
 7f0:	99 7e       	andi	r25, 0xE9	; 233
 7f2:	a9 2e       	mov	r10, r25
 7f4:	09 c0       	rjmp	.+18     	; 0x808 <vfprintf+0x31a>
 7f6:	a2 fe       	sbrs	r10, 2
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <vfprintf+0x318>
 7fa:	b3 94       	inc	r11
 7fc:	b3 94       	inc	r11
 7fe:	04 c0       	rjmp	.+8      	; 0x808 <vfprintf+0x31a>
 800:	8a 2d       	mov	r24, r10
 802:	86 78       	andi	r24, 0x86	; 134
 804:	09 f0       	breq	.+2      	; 0x808 <vfprintf+0x31a>
 806:	b3 94       	inc	r11
 808:	a3 fc       	sbrc	r10, 3
 80a:	10 c0       	rjmp	.+32     	; 0x82c <vfprintf+0x33e>
 80c:	a0 fe       	sbrs	r10, 0
 80e:	06 c0       	rjmp	.+12     	; 0x81c <vfprintf+0x32e>
 810:	b2 14       	cp	r11, r2
 812:	80 f4       	brcc	.+32     	; 0x834 <vfprintf+0x346>
 814:	28 0c       	add	r2, r8
 816:	92 2c       	mov	r9, r2
 818:	9b 18       	sub	r9, r11
 81a:	0d c0       	rjmp	.+26     	; 0x836 <vfprintf+0x348>
 81c:	b2 14       	cp	r11, r2
 81e:	58 f4       	brcc	.+22     	; 0x836 <vfprintf+0x348>
 820:	b6 01       	movw	r22, r12
 822:	80 e2       	ldi	r24, 0x20	; 32
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	76 d0       	rcall	.+236    	; 0x914 <fputc>
 828:	b3 94       	inc	r11
 82a:	f8 cf       	rjmp	.-16     	; 0x81c <vfprintf+0x32e>
 82c:	b2 14       	cp	r11, r2
 82e:	18 f4       	brcc	.+6      	; 0x836 <vfprintf+0x348>
 830:	2b 18       	sub	r2, r11
 832:	02 c0       	rjmp	.+4      	; 0x838 <vfprintf+0x34a>
 834:	98 2c       	mov	r9, r8
 836:	21 2c       	mov	r2, r1
 838:	a4 fe       	sbrs	r10, 4
 83a:	0f c0       	rjmp	.+30     	; 0x85a <vfprintf+0x36c>
 83c:	b6 01       	movw	r22, r12
 83e:	80 e3       	ldi	r24, 0x30	; 48
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	68 d0       	rcall	.+208    	; 0x914 <fputc>
 844:	a2 fe       	sbrs	r10, 2
 846:	16 c0       	rjmp	.+44     	; 0x874 <vfprintf+0x386>
 848:	a1 fc       	sbrc	r10, 1
 84a:	03 c0       	rjmp	.+6      	; 0x852 <vfprintf+0x364>
 84c:	88 e7       	ldi	r24, 0x78	; 120
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <vfprintf+0x368>
 852:	88 e5       	ldi	r24, 0x58	; 88
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	b6 01       	movw	r22, r12
 858:	0c c0       	rjmp	.+24     	; 0x872 <vfprintf+0x384>
 85a:	8a 2d       	mov	r24, r10
 85c:	86 78       	andi	r24, 0x86	; 134
 85e:	51 f0       	breq	.+20     	; 0x874 <vfprintf+0x386>
 860:	a1 fe       	sbrs	r10, 1
 862:	02 c0       	rjmp	.+4      	; 0x868 <vfprintf+0x37a>
 864:	8b e2       	ldi	r24, 0x2B	; 43
 866:	01 c0       	rjmp	.+2      	; 0x86a <vfprintf+0x37c>
 868:	80 e2       	ldi	r24, 0x20	; 32
 86a:	a7 fc       	sbrc	r10, 7
 86c:	8d e2       	ldi	r24, 0x2D	; 45
 86e:	b6 01       	movw	r22, r12
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	50 d0       	rcall	.+160    	; 0x914 <fputc>
 874:	89 14       	cp	r8, r9
 876:	30 f4       	brcc	.+12     	; 0x884 <vfprintf+0x396>
 878:	b6 01       	movw	r22, r12
 87a:	80 e3       	ldi	r24, 0x30	; 48
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	4a d0       	rcall	.+148    	; 0x914 <fputc>
 880:	9a 94       	dec	r9
 882:	f8 cf       	rjmp	.-16     	; 0x874 <vfprintf+0x386>
 884:	8a 94       	dec	r8
 886:	f3 01       	movw	r30, r6
 888:	e8 0d       	add	r30, r8
 88a:	f1 1d       	adc	r31, r1
 88c:	80 81       	ld	r24, Z
 88e:	b6 01       	movw	r22, r12
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	40 d0       	rcall	.+128    	; 0x914 <fputc>
 894:	81 10       	cpse	r8, r1
 896:	f6 cf       	rjmp	.-20     	; 0x884 <vfprintf+0x396>
 898:	22 20       	and	r2, r2
 89a:	09 f4       	brne	.+2      	; 0x89e <vfprintf+0x3b0>
 89c:	4e ce       	rjmp	.-868    	; 0x53a <vfprintf+0x4c>
 89e:	b6 01       	movw	r22, r12
 8a0:	80 e2       	ldi	r24, 0x20	; 32
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	37 d0       	rcall	.+110    	; 0x914 <fputc>
 8a6:	2a 94       	dec	r2
 8a8:	f7 cf       	rjmp	.-18     	; 0x898 <vfprintf+0x3aa>
 8aa:	f6 01       	movw	r30, r12
 8ac:	86 81       	ldd	r24, Z+6	; 0x06
 8ae:	97 81       	ldd	r25, Z+7	; 0x07
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <vfprintf+0x3c8>
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	9f ef       	ldi	r25, 0xFF	; 255
 8b6:	2b 96       	adiw	r28, 0x0b	; 11
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	f8 94       	cli
 8bc:	de bf       	out	0x3e, r29	; 62
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	cd bf       	out	0x3d, r28	; 61
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	1f 91       	pop	r17
 8c8:	0f 91       	pop	r16
 8ca:	ff 90       	pop	r15
 8cc:	ef 90       	pop	r14
 8ce:	df 90       	pop	r13
 8d0:	cf 90       	pop	r12
 8d2:	bf 90       	pop	r11
 8d4:	af 90       	pop	r10
 8d6:	9f 90       	pop	r9
 8d8:	8f 90       	pop	r8
 8da:	7f 90       	pop	r7
 8dc:	6f 90       	pop	r6
 8de:	5f 90       	pop	r5
 8e0:	4f 90       	pop	r4
 8e2:	3f 90       	pop	r3
 8e4:	2f 90       	pop	r2
 8e6:	08 95       	ret

000008e8 <strnlen_P>:
 8e8:	fc 01       	movw	r30, r24
 8ea:	05 90       	lpm	r0, Z+
 8ec:	61 50       	subi	r22, 0x01	; 1
 8ee:	70 40       	sbci	r23, 0x00	; 0
 8f0:	01 10       	cpse	r0, r1
 8f2:	d8 f7       	brcc	.-10     	; 0x8ea <strnlen_P+0x2>
 8f4:	80 95       	com	r24
 8f6:	90 95       	com	r25
 8f8:	8e 0f       	add	r24, r30
 8fa:	9f 1f       	adc	r25, r31
 8fc:	08 95       	ret

000008fe <strnlen>:
 8fe:	fc 01       	movw	r30, r24
 900:	61 50       	subi	r22, 0x01	; 1
 902:	70 40       	sbci	r23, 0x00	; 0
 904:	01 90       	ld	r0, Z+
 906:	01 10       	cpse	r0, r1
 908:	d8 f7       	brcc	.-10     	; 0x900 <strnlen+0x2>
 90a:	80 95       	com	r24
 90c:	90 95       	com	r25
 90e:	8e 0f       	add	r24, r30
 910:	9f 1f       	adc	r25, r31
 912:	08 95       	ret

00000914 <fputc>:
 914:	0f 93       	push	r16
 916:	1f 93       	push	r17
 918:	cf 93       	push	r28
 91a:	df 93       	push	r29
 91c:	fb 01       	movw	r30, r22
 91e:	23 81       	ldd	r18, Z+3	; 0x03
 920:	21 fd       	sbrc	r18, 1
 922:	03 c0       	rjmp	.+6      	; 0x92a <fputc+0x16>
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	2c c0       	rjmp	.+88     	; 0x982 <fputc+0x6e>
 92a:	22 ff       	sbrs	r18, 2
 92c:	16 c0       	rjmp	.+44     	; 0x95a <fputc+0x46>
 92e:	46 81       	ldd	r20, Z+6	; 0x06
 930:	57 81       	ldd	r21, Z+7	; 0x07
 932:	24 81       	ldd	r18, Z+4	; 0x04
 934:	35 81       	ldd	r19, Z+5	; 0x05
 936:	42 17       	cp	r20, r18
 938:	53 07       	cpc	r21, r19
 93a:	44 f4       	brge	.+16     	; 0x94c <fputc+0x38>
 93c:	a0 81       	ld	r26, Z
 93e:	b1 81       	ldd	r27, Z+1	; 0x01
 940:	9d 01       	movw	r18, r26
 942:	2f 5f       	subi	r18, 0xFF	; 255
 944:	3f 4f       	sbci	r19, 0xFF	; 255
 946:	31 83       	std	Z+1, r19	; 0x01
 948:	20 83       	st	Z, r18
 94a:	8c 93       	st	X, r24
 94c:	26 81       	ldd	r18, Z+6	; 0x06
 94e:	37 81       	ldd	r19, Z+7	; 0x07
 950:	2f 5f       	subi	r18, 0xFF	; 255
 952:	3f 4f       	sbci	r19, 0xFF	; 255
 954:	37 83       	std	Z+7, r19	; 0x07
 956:	26 83       	std	Z+6, r18	; 0x06
 958:	14 c0       	rjmp	.+40     	; 0x982 <fputc+0x6e>
 95a:	8b 01       	movw	r16, r22
 95c:	ec 01       	movw	r28, r24
 95e:	fb 01       	movw	r30, r22
 960:	00 84       	ldd	r0, Z+8	; 0x08
 962:	f1 85       	ldd	r31, Z+9	; 0x09
 964:	e0 2d       	mov	r30, r0
 966:	19 95       	eicall
 968:	89 2b       	or	r24, r25
 96a:	e1 f6       	brne	.-72     	; 0x924 <fputc+0x10>
 96c:	d8 01       	movw	r26, r16
 96e:	16 96       	adiw	r26, 0x06	; 6
 970:	8d 91       	ld	r24, X+
 972:	9c 91       	ld	r25, X
 974:	17 97       	sbiw	r26, 0x07	; 7
 976:	01 96       	adiw	r24, 0x01	; 1
 978:	17 96       	adiw	r26, 0x07	; 7
 97a:	9c 93       	st	X, r25
 97c:	8e 93       	st	-X, r24
 97e:	16 97       	sbiw	r26, 0x06	; 6
 980:	ce 01       	movw	r24, r28
 982:	df 91       	pop	r29
 984:	cf 91       	pop	r28
 986:	1f 91       	pop	r17
 988:	0f 91       	pop	r16
 98a:	08 95       	ret

0000098c <__ultoa_invert>:
 98c:	fa 01       	movw	r30, r20
 98e:	aa 27       	eor	r26, r26
 990:	28 30       	cpi	r18, 0x08	; 8
 992:	51 f1       	breq	.+84     	; 0x9e8 <__ultoa_invert+0x5c>
 994:	20 31       	cpi	r18, 0x10	; 16
 996:	81 f1       	breq	.+96     	; 0x9f8 <__ultoa_invert+0x6c>
 998:	e8 94       	clt
 99a:	6f 93       	push	r22
 99c:	6e 7f       	andi	r22, 0xFE	; 254
 99e:	6e 5f       	subi	r22, 0xFE	; 254
 9a0:	7f 4f       	sbci	r23, 0xFF	; 255
 9a2:	8f 4f       	sbci	r24, 0xFF	; 255
 9a4:	9f 4f       	sbci	r25, 0xFF	; 255
 9a6:	af 4f       	sbci	r26, 0xFF	; 255
 9a8:	b1 e0       	ldi	r27, 0x01	; 1
 9aa:	3e d0       	rcall	.+124    	; 0xa28 <__ultoa_invert+0x9c>
 9ac:	b4 e0       	ldi	r27, 0x04	; 4
 9ae:	3c d0       	rcall	.+120    	; 0xa28 <__ultoa_invert+0x9c>
 9b0:	67 0f       	add	r22, r23
 9b2:	78 1f       	adc	r23, r24
 9b4:	89 1f       	adc	r24, r25
 9b6:	9a 1f       	adc	r25, r26
 9b8:	a1 1d       	adc	r26, r1
 9ba:	68 0f       	add	r22, r24
 9bc:	79 1f       	adc	r23, r25
 9be:	8a 1f       	adc	r24, r26
 9c0:	91 1d       	adc	r25, r1
 9c2:	a1 1d       	adc	r26, r1
 9c4:	6a 0f       	add	r22, r26
 9c6:	71 1d       	adc	r23, r1
 9c8:	81 1d       	adc	r24, r1
 9ca:	91 1d       	adc	r25, r1
 9cc:	a1 1d       	adc	r26, r1
 9ce:	20 d0       	rcall	.+64     	; 0xa10 <__ultoa_invert+0x84>
 9d0:	09 f4       	brne	.+2      	; 0x9d4 <__ultoa_invert+0x48>
 9d2:	68 94       	set
 9d4:	3f 91       	pop	r19
 9d6:	2a e0       	ldi	r18, 0x0A	; 10
 9d8:	26 9f       	mul	r18, r22
 9da:	11 24       	eor	r1, r1
 9dc:	30 19       	sub	r19, r0
 9de:	30 5d       	subi	r19, 0xD0	; 208
 9e0:	31 93       	st	Z+, r19
 9e2:	de f6       	brtc	.-74     	; 0x99a <__ultoa_invert+0xe>
 9e4:	cf 01       	movw	r24, r30
 9e6:	08 95       	ret
 9e8:	46 2f       	mov	r20, r22
 9ea:	47 70       	andi	r20, 0x07	; 7
 9ec:	40 5d       	subi	r20, 0xD0	; 208
 9ee:	41 93       	st	Z+, r20
 9f0:	b3 e0       	ldi	r27, 0x03	; 3
 9f2:	0f d0       	rcall	.+30     	; 0xa12 <__ultoa_invert+0x86>
 9f4:	c9 f7       	brne	.-14     	; 0x9e8 <__ultoa_invert+0x5c>
 9f6:	f6 cf       	rjmp	.-20     	; 0x9e4 <__ultoa_invert+0x58>
 9f8:	46 2f       	mov	r20, r22
 9fa:	4f 70       	andi	r20, 0x0F	; 15
 9fc:	40 5d       	subi	r20, 0xD0	; 208
 9fe:	4a 33       	cpi	r20, 0x3A	; 58
 a00:	18 f0       	brcs	.+6      	; 0xa08 <__ultoa_invert+0x7c>
 a02:	49 5d       	subi	r20, 0xD9	; 217
 a04:	31 fd       	sbrc	r19, 1
 a06:	40 52       	subi	r20, 0x20	; 32
 a08:	41 93       	st	Z+, r20
 a0a:	02 d0       	rcall	.+4      	; 0xa10 <__ultoa_invert+0x84>
 a0c:	a9 f7       	brne	.-22     	; 0x9f8 <__ultoa_invert+0x6c>
 a0e:	ea cf       	rjmp	.-44     	; 0x9e4 <__ultoa_invert+0x58>
 a10:	b4 e0       	ldi	r27, 0x04	; 4
 a12:	a6 95       	lsr	r26
 a14:	97 95       	ror	r25
 a16:	87 95       	ror	r24
 a18:	77 95       	ror	r23
 a1a:	67 95       	ror	r22
 a1c:	ba 95       	dec	r27
 a1e:	c9 f7       	brne	.-14     	; 0xa12 <__ultoa_invert+0x86>
 a20:	00 97       	sbiw	r24, 0x00	; 0
 a22:	61 05       	cpc	r22, r1
 a24:	71 05       	cpc	r23, r1
 a26:	08 95       	ret
 a28:	9b 01       	movw	r18, r22
 a2a:	ac 01       	movw	r20, r24
 a2c:	0a 2e       	mov	r0, r26
 a2e:	06 94       	lsr	r0
 a30:	57 95       	ror	r21
 a32:	47 95       	ror	r20
 a34:	37 95       	ror	r19
 a36:	27 95       	ror	r18
 a38:	ba 95       	dec	r27
 a3a:	c9 f7       	brne	.-14     	; 0xa2e <__ultoa_invert+0xa2>
 a3c:	62 0f       	add	r22, r18
 a3e:	73 1f       	adc	r23, r19
 a40:	84 1f       	adc	r24, r20
 a42:	95 1f       	adc	r25, r21
 a44:	a0 1d       	adc	r26, r0
 a46:	08 95       	ret

00000a48 <_exit>:
 a48:	f8 94       	cli

00000a4a <__stop_program>:
 a4a:	ff cf       	rjmp	.-2      	; 0xa4a <__stop_program>
